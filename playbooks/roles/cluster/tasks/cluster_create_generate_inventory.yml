---
- name: set AWS credentials
  set_fact:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID' ) }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY' ) }}"

- name: Search for tagged AMI
  ec2_ami_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ oo_sublocation }}"
    filters:
      "tag:image": latest
  register: found_ami_info

- name: Use the found AMI
  set_fact:
    g_play_image_id: "{{ found_ami_info['images'][0]['image_id'] }}"
  ignore_errors: true

- fail:
    msg: "AMI with tag 'image: latest' does not exist in: {{ oo_sublocation }}"
  when: g_play_image_id is undefined

- name: Make dns directory
  file:
    path: "/tmp/oa_dns_hook/tasks"
    recurse: yes
    state: directory

- name: Get DNS task
  get_url:
    url: https://raw.githubusercontent.com/StevenTobin/openshift-tools/integreatly_cluster_create/ansible/roles/oa_aws_provisioning_dns_hook/tasks/main.yml
    dest: "/tmp/oa_dns_hook/tasks/main.yml"
    force: yes

- name: create directory for user under /tmp
  file:
    path: "/tmp/{{ lookup('env', 'USER') }}/{{ oo_clusterid }}"
    recurse: yes
    state: directory

- name: set logging flag
  set_fact:
      flag_provision_logging: "{% if survey_provision_logging=='true' %}true{% elif survey_provision_logging=='false'%}false{% else %}false{% endif %}"

- name: find provisioning vars vault file
  find:
    paths: /var/lib/awx/projects
    patterns: 'provisioning_vars.yml.j2'
    recurse: yes
  register: found_files

- fail:
    msg: "No provisioning vars file found, is the credentials repo present and the inventory source up to date?"
  when: found_files is undefined

- name: set domain variable
  set_fact:
    domain: "{% if cluster_type=='dev' %}{{ dev_domain }}{% elif cluster_type=='poc' %}{{ poc_domain }}{% endif %}"

- name: Overwrite DNS task file if neccessary
  get_url:
    url: https://raw.githubusercontent.com/StevenTobin/openshift-tools/integreatly_cluster_create_3scale/ansible/roles/oa_aws_provisioning_dns_hook/tasks/main.yml
    dest: "/tmp/oa_dns_hook/tasks/main.yml"
    force: yes
  when: cluster_type == 'poc'

- include_tasks: vault_encrypt_variables.yml
  with_items:
        - { name: 'aws_access_key', value: "{{ lookup('env', 'AWS_ACCESS_KEY_ID' ) }}" }
        - { name: 'aws_secret_key', value: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY' ) }}" }
        - { name: 'rh_pass', value: "{{ rh_pass }}" }
        - { name: 'rh_user', value: "{{ rh_user }}" }
  no_log: true
        
- name: create the provisioning_vars.yml
  template:
    src: "{{ found_files.files[0].path }}"
    dest: "/tmp/{{ oo_clusterid }}/{{ oo_clusterid }}_inventory.yml"

- name: Create cluster inventory in tower
  shell: tower-cli inventory create -n {{ oo_clusterid }} --organization secret

- name: Generate {{ oo_clusterid }} inventory in tower
  shell: "awx-manage inventory_import --source=/tmp/{{ oo_clusterid }}/{{ oo_clusterid }}_inventory.yml --inventory-name={{ oo_clusterid }} --overwrite"

- name: Generate Provisioning_inventory in tower
  shell: "awx-manage inventory_import --source=/tmp/{{ oo_clusterid }}/{{ oo_clusterid }}_inventory.yml --inventory-name=Provisioning_inventory --overwrite"